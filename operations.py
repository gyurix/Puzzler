import abc

from state import State


class Operation:
    """
        The abstract Operation class, marking that all the Operations should have an apply method
        with a starting state argument implemented.
    """

    @abc.abstractmethod
    def apply(self, start):
        """
            Applies the operation to the given starting state
            :param start: The starting state
            :return: The state generated by applying this operation to the starting state,
                     None if the operation can not be applied.
        """
        return None


class OperationUp(Operation):
    """
        Operation for moving the m up by one field
    """

    def apply(self, start):
        if start.y == 0:
            return None
        final = State(start)
        final.move(start.x, start.y - 1)
        return final

    def __repr__(self):
        return "Up"


class OperationDown(Operation):
    """
        Operation for moving the m down by one field
    """

    def apply(self, start):
        if start.y == start.maxy() - 1:
            return None
        final = State(start)
        final.move(start.x, start.y + 1)
        return final

    def __repr__(self):
        return "Down"


class OperationLeft(Operation):
    """
        Operation for moving the m left by one field
    """

    def apply(self, start):
        if start.x == 0:
            return None
        final = State(start)
        final.move(start.x - 1, start.y)
        return final

    def __repr__(self):
        return "Left"


class OperationRight(Operation):
    """
        Operation for moving the m right by one field
    """

    def apply(self, start):
        if start.x == start.maxx() - 1:
            return None
        final = State(start)
        final.move(start.x + 1, start.y)
        return final

    def __repr__(self):
        return "Right"


# List of available operations
operations = (OperationLeft(), OperationRight(), OperationUp(), OperationDown())
